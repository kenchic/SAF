///////////////////////////////////////////////////////////
//  Entidad.cs
//  Implementation of the Class Entidad
//  Generated by Enterprise Architect
//  Created on:      05-abr-2013 12:08:31 p.m.
//  Original author: kenchic
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using BaseDatos;

namespace Seguridad.DALC {


    internal abstract class Entidad<T> where T : ClaseBase, new()
    {
		private Comandos m_ejecutor_base_datos;
        private string m_nombre_procedimiento;
        protected string m_nombreParametroIdPadre;

		~Entidad(){
            Dispose(false);
		}

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        public virtual void Dispose(bool disposing)
        {

        }

		/// 
		/// <param name="ejecutorBaseDatos"></param>
		public  Entidad(Comandos ejecutorBaseDatos){

		}

		public Entidad(){

		}

		/// 
		/// <param name="Id"></param>
        public virtual T Consultar(int id)
        {

			return null;
		}

        /// 
        /// <param name="fab"></param>
        public List<T> ConsultarTodos(IFabricaEntidad<T> fab)
        {
            DataTable datos;
            EjecutorBaseDatos.limpiarParametros();
            datos = EjecutorBaseDatos.ejecutarProcedimiento(NombreProcedimiento).Tables[0];
            return fab.CrearObjetos(ref datos);
        }

		/// 
		/// <param name="obj"></param>
        public virtual int Editar(T obj)
        {

			return 0;
		}

		public Comandos EjecutorBaseDatos{
			get{
				return m_ejecutor_base_datos;
			}
			set{
				m_ejecutor_base_datos = value;
			}
		}

		/// 
		/// <param name="obj"></param>
        public virtual int Eliminar(T obj)
        {

			return 0;
		}

		/// 
		/// <param name="obj"></param>
        public virtual int Insertar(T obj)
        {

			return 0;
		}

		public string NombreProcedimiento{
			get{
				return m_nombre_procedimiento;
			}
			set{
				m_nombre_procedimiento = value;
			}
		}

        public virtual List<T> ConsultarPorParametros(Dictionary<string, string> parametros, IFabricaEntidad<T> fabrica)
        {
	        DataTable datos;
	        EjecutorBaseDatos.limpiarParametros();
            foreach (var parametro in parametros)
                EjecutorBaseDatos.agregarParametro(parametro.Key, parametro.Value);
	        EjecutorBaseDatos.agregarParametroCursor();
	        datos = EjecutorBaseDatos.ejecutarProcedimiento(NombreProcedimiento).Tables[0];
            return fabrica.CrearObjetos(ref datos);
        }

        protected Entidad(Comandos ejecutorBaseDatos, string nombreParametroIdPadre)
        {
            EjecutorBaseDatos = ejecutorBaseDatos;
            m_nombreParametroIdPadre = nombreParametroIdPadre;
        }

	}//end Entidad

}//end namespace DALC